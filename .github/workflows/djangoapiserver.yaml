name: django

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: apiserver

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        # with:
        #   python-version:

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::052737074023:role/apiserverrole
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@ddd

      # - name: Build Tag and Push Image to Amazon ECR
      #   id: build-Image
      #   env:
      #     ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build -t $ECR_REPOSITORY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REPOSITORY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "image=$ECR_REPOSITORY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: build and release to DockerHub
      #   env:
      #     NAME: ${{ secrets.DOCKERHUB_USERNAME }}
      #     REPO: djangoapiserver #  Dockerhub 에서 만든 레파지토리 이름
      #   run: |
      #     docker build -t $REPO .
      #     docker tag $REPO:latest $NAME/$REPO:latest
      #     docker push $NAME/$REPO:latest

      # - name: Decode SSH Key
      #   run: |
      #     echo "${{ secrets.EC2_KEY }}" | base64 -d > ec2-key.pem
      #     chmod 600 ec2-key.pem

      # - name: Connect to EC2 and Deployment
      #   run: |
      #     ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
      #       if [ "$(docker ps -a -q -f name=^/boring_ptolemy)" ]; then
      #         echo "컨테이너 있음"
      #         docker stop boring_ptolemy
      #         docker rmi hopaper/djangoapiserver
      #       else
      #         echo "컨테이너 없음"
      #       fi

      #     sudo docker run --name djangoapiserver -p 80:80 -d --rm hopaper/djangoapiserver
      #     EOF
